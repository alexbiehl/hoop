{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses, TemplateHaskell #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Hadoop.Protos.DataTransferProtos (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".hadoop.hdfs\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [], baseName = MName \"DataTransferProtos\"}, protoFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos.hs\"], protoSource = \"datatransfer.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DataTransferEncryptorMessageProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"DataTransferEncryptorMessageProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.DataTransferEncryptorStatus\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName = MName \"DataTransferEncryptorStatus\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.payload\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName' = FName \"payload\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.message\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName' = FName \"message\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.cipherOption\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName' = FName \"cipherOption\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.CipherOptionProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"CipherOptionProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"BaseHeaderProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BaseHeaderProto.block\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BaseHeaderProto\"], baseName' = FName \"block\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ExtendedBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"ExtendedBlockProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BaseHeaderProto.token\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BaseHeaderProto\"], baseName' = FName \"token\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.common.TokenProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"SecurityProtos\"], baseName = MName \"TokenProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BaseHeaderProto.traceInfo\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BaseHeaderProto\"], baseName' = FName \"traceInfo\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferTraceInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DataTransferTraceInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferTraceInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DataTransferTraceInfoProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"DataTransferTraceInfoProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferTraceInfoProto.traceId\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferTraceInfoProto\"], baseName' = FName \"traceId\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DataTransferTraceInfoProto.parentId\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DataTransferTraceInfoProto\"], baseName' = FName \"parentId\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ClientOperationHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ClientOperationHeaderProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ClientOperationHeaderProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ClientOperationHeaderProto.baseHeader\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ClientOperationHeaderProto\"], baseName' = FName \"baseHeader\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ClientOperationHeaderProto.clientName\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ClientOperationHeaderProto\"], baseName' = FName \"clientName\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.CachingStrategyProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"CachingStrategyProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"CachingStrategyProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.CachingStrategyProto.dropBehind\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"CachingStrategyProto\"], baseName' = FName \"dropBehind\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.CachingStrategyProto.readahead\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"CachingStrategyProto\"], baseName' = FName \"readahead\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpReadBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpReadBlockProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpReadBlockProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReadBlockProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReadBlockProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ClientOperationHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ClientOperationHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReadBlockProto.offset\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReadBlockProto\"], baseName' = FName \"offset\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReadBlockProto.len\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReadBlockProto\"], baseName' = FName \"len\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReadBlockProto.sendChecksums\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReadBlockProto\"], baseName' = FName \"sendChecksums\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Just \"true\", hsDefault = Just (HsDef'Bool True)},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReadBlockProto.cachingStrategy\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReadBlockProto\"], baseName' = FName \"cachingStrategy\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 42}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.CachingStrategyProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"CachingStrategyProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ChecksumProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ChecksumProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ChecksumProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ChecksumProto.type\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ChecksumProto\"], baseName' = FName \"type'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ChecksumTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"ChecksumTypeProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ChecksumProto.bytesPerChecksum\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ChecksumProto\"], baseName' = FName \"bytesPerChecksum\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpWriteBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpWriteBlockProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpWriteBlockProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ClientOperationHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ClientOperationHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.targets\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"targets\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DatanodeInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"DatanodeInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.source\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"source\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DatanodeInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"DatanodeInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.stage\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"stage\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.OpWriteBlockProto.BlockConstructionStage\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName = MName \"BlockConstructionStage\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.pipelineSize\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"pipelineSize\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.minBytesRcvd\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"minBytesRcvd\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 6}, wireTag = WireTag {getWireTag = 48}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.maxBytesRcvd\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"maxBytesRcvd\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 7}, wireTag = WireTag {getWireTag = 56}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.latestGenerationStamp\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"latestGenerationStamp\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 8}, wireTag = WireTag {getWireTag = 64}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.requestedChecksum\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"requestedChecksum\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 9}, wireTag = WireTag {getWireTag = 74}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ChecksumProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ChecksumProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.cachingStrategy\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"cachingStrategy\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 10}, wireTag = WireTag {getWireTag = 82}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.CachingStrategyProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"CachingStrategyProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.storageType\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"storageType\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 11}, wireTag = WireTag {getWireTag = 88}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.StorageTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"StorageTypeProto\"}), hsRawDefault = Just \"DISK\", hsDefault = Just (HsDef'Enum \"DISK\")},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.targetStorageTypes\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"targetStorageTypes\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 12}, wireTag = WireTag {getWireTag = 96}, packedTag = Just (WireTag {getWireTag = 96},WireTag {getWireTag = 98}), wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = True, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.StorageTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"StorageTypeProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.allowLazyPersist\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"allowLazyPersist\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 13}, wireTag = WireTag {getWireTag = 104}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Just \"false\", hsDefault = Just (HsDef'Bool False)},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.pinning\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"pinning\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 14}, wireTag = WireTag {getWireTag = 112}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Just \"false\", hsDefault = Just (HsDef'Bool False)},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpWriteBlockProto.targetPinnings\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName' = FName \"targetPinnings\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 15}, wireTag = WireTag {getWireTag = 120}, packedTag = Just (WireTag {getWireTag = 120},WireTag {getWireTag = 122}), wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = True, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpTransferBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpTransferBlockProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpTransferBlockProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpTransferBlockProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpTransferBlockProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ClientOperationHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ClientOperationHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpTransferBlockProto.targets\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpTransferBlockProto\"], baseName' = FName \"targets\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DatanodeInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"DatanodeInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpTransferBlockProto.targetStorageTypes\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpTransferBlockProto\"], baseName' = FName \"targetStorageTypes\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Just (WireTag {getWireTag = 24},WireTag {getWireTag = 26}), wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = True, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.StorageTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"StorageTypeProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpReplaceBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpReplaceBlockProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpReplaceBlockProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReplaceBlockProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReplaceBlockProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReplaceBlockProto.delHint\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReplaceBlockProto\"], baseName' = FName \"delHint\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReplaceBlockProto.source\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReplaceBlockProto\"], baseName' = FName \"source\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DatanodeInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"DatanodeInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpReplaceBlockProto.storageType\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpReplaceBlockProto\"], baseName' = FName \"storageType\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.StorageTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"StorageTypeProto\"}), hsRawDefault = Just \"DISK\", hsDefault = Just (HsDef'Enum \"DISK\")}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpCopyBlockProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpCopyBlockProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpCopyBlockProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpCopyBlockProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpCopyBlockProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpBlockChecksumProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpBlockChecksumProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpBlockChecksumProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpBlockChecksumProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpBlockChecksumProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmIdProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmIdProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ShortCircuitShmIdProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmIdProto.hi\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmIdProto\"], baseName' = FName \"hi\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmIdProto.lo\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmIdProto\"], baseName' = FName \"lo\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmSlotProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmSlotProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ShortCircuitShmSlotProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmSlotProto.shmId\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmSlotProto\"], baseName' = FName \"shmId\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmIdProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmIdProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmSlotProto.slotIdx\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmSlotProto\"], baseName' = FName \"slotIdx\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpRequestShortCircuitAccessProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpRequestShortCircuitAccessProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpRequestShortCircuitAccessProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpRequestShortCircuitAccessProto.header\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpRequestShortCircuitAccessProto\"], baseName' = FName \"header\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.BaseHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BaseHeaderProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpRequestShortCircuitAccessProto.maxVersion\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpRequestShortCircuitAccessProto\"], baseName' = FName \"maxVersion\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpRequestShortCircuitAccessProto.slotId\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpRequestShortCircuitAccessProto\"], baseName' = FName \"slotId\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmSlotProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmSlotProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpRequestShortCircuitAccessProto.supportsReceiptVerification\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpRequestShortCircuitAccessProto\"], baseName' = FName \"supportsReceiptVerification\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Just \"false\", hsDefault = Just (HsDef'Bool False)}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessRequestProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ReleaseShortCircuitAccessRequestProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ReleaseShortCircuitAccessRequestProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessRequestProto.slotId\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReleaseShortCircuitAccessRequestProto\"], baseName' = FName \"slotId\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmSlotProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmSlotProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessRequestProto.traceInfo\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReleaseShortCircuitAccessRequestProto\"], baseName' = FName \"traceInfo\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferTraceInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DataTransferTraceInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessResponseProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ReleaseShortCircuitAccessResponseProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ReleaseShortCircuitAccessResponseProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessResponseProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReleaseShortCircuitAccessResponseProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReleaseShortCircuitAccessResponseProto.error\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReleaseShortCircuitAccessResponseProto\"], baseName' = FName \"error\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmRequestProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmRequestProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ShortCircuitShmRequestProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmRequestProto.clientName\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmRequestProto\"], baseName' = FName \"clientName\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmRequestProto.traceInfo\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmRequestProto\"], baseName' = FName \"traceInfo\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferTraceInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DataTransferTraceInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmResponseProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmResponseProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ShortCircuitShmResponseProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmResponseProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmResponseProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmResponseProto.error\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmResponseProto\"], baseName' = FName \"error\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ShortCircuitShmResponseProto.id\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ShortCircuitShmResponseProto\"], baseName' = FName \"id\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitShmIdProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitShmIdProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.PacketHeaderProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"PacketHeaderProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"PacketHeaderProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PacketHeaderProto.offsetInBlock\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PacketHeaderProto\"], baseName' = FName \"offsetInBlock\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 9}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 16}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PacketHeaderProto.seqno\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PacketHeaderProto\"], baseName' = FName \"seqno\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 17}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 16}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PacketHeaderProto.lastPacketInBlock\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PacketHeaderProto\"], baseName' = FName \"lastPacketInBlock\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PacketHeaderProto.dataLen\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PacketHeaderProto\"], baseName' = FName \"dataLen\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 37}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 15}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PacketHeaderProto.syncBlock\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PacketHeaderProto\"], baseName' = FName \"syncBlock\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Just \"false\", hsDefault = Just (HsDef'Bool False)}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.PipelineAckProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"PipelineAckProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"PipelineAckProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PipelineAckProto.seqno\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PipelineAckProto\"], baseName' = FName \"seqno\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 18}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PipelineAckProto.reply\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PipelineAckProto\"], baseName' = FName \"reply\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Just (WireTag {getWireTag = 16},WireTag {getWireTag = 18}), wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = True, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PipelineAckProto.downstreamAckTimeNanos\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PipelineAckProto\"], baseName' = FName \"downstreamAckTimeNanos\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Just \"0\", hsDefault = Just (HsDef'Integer 0)},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.PipelineAckProto.flag\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"PipelineAckProto\"], baseName' = FName \"flag\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Just (WireTag {getWireTag = 32},WireTag {getWireTag = 34}), wireTagLength = 1, isPacked = True, isRequired = False, canRepeat = True, mightPack = True, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ReadOpChecksumInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ReadOpChecksumInfoProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ReadOpChecksumInfoProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReadOpChecksumInfoProto.checksum\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReadOpChecksumInfoProto\"], baseName' = FName \"checksum\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ChecksumProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ChecksumProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ReadOpChecksumInfoProto.chunkOffset\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ReadOpChecksumInfoProto\"], baseName' = FName \"chunkOffset\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.BlockOpResponseProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"BlockOpResponseProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"BlockOpResponseProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.firstBadLink\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"firstBadLink\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.checksumResponse\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"checksumResponse\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpBlockChecksumResponseProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.readOpChecksumInfo\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"readOpChecksumInfo\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ReadOpChecksumInfoProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ReadOpChecksumInfoProto\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.message\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"message\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 42}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.BlockOpResponseProto.shortCircuitAccessVersion\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"BlockOpResponseProto\"], baseName' = FName \"shortCircuitAccessVersion\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 6}, wireTag = WireTag {getWireTag = 48}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.ClientReadStatusProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ClientReadStatusProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ClientReadStatusProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.ClientReadStatusProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"ClientReadStatusProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.DNTransferAckProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"DNTransferAckProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"DNTransferAckProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.DNTransferAckProto.status\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"DNTransferAckProto\"], baseName' = FName \"status\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"OpBlockChecksumResponseProto\"}, descFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpBlockChecksumResponseProto.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto.bytesPerCrc\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpBlockChecksumResponseProto\"], baseName' = FName \"bytesPerCrc\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto.crcPerBlock\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpBlockChecksumResponseProto\"], baseName' = FName \"crcPerBlock\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 4}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto.md5\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpBlockChecksumResponseProto\"], baseName' = FName \"md5\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".hadoop.hdfs.OpBlockChecksumResponseProto.crcType\", haskellPrefix' = [MName \"Hadoop\",MName \"Protos\"], parentModule' = [MName \"DataTransferProtos\",MName \"OpBlockChecksumResponseProto\"], baseName' = FName \"crcType\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 32}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".hadoop.hdfs.ChecksumTypeProto\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"HdfsProtos\"], baseName = MName \"ChecksumTypeProto\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".hadoop.hdfs.Status\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"Status\"}, enumFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"Status.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"SUCCESS\"),(EnumCode {getEnumCode = 1},\"ERROR\"),(EnumCode {getEnumCode = 2},\"ERROR_CHECKSUM\"),(EnumCode {getEnumCode = 3},\"ERROR_INVALID\"),(EnumCode {getEnumCode = 4},\"ERROR_EXISTS\"),(EnumCode {getEnumCode = 5},\"ERROR_ACCESS_TOKEN\"),(EnumCode {getEnumCode = 6},\"CHECKSUM_OK\"),(EnumCode {getEnumCode = 7},\"ERROR_UNSUPPORTED\"),(EnumCode {getEnumCode = 8},\"OOB_RESTART\"),(EnumCode {getEnumCode = 9},\"OOB_RESERVED1\"),(EnumCode {getEnumCode = 10},\"OOB_RESERVED2\"),(EnumCode {getEnumCode = 11},\"OOB_RESERVED3\"),(EnumCode {getEnumCode = 12},\"IN_PROGRESS\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".hadoop.hdfs.ShortCircuitFdResponse\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\"], baseName = MName \"ShortCircuitFdResponse\"}, enumFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"ShortCircuitFdResponse.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"DO_NOT_USE_RECEIPT_VERIFICATION\"),(EnumCode {getEnumCode = 1},\"USE_RECEIPT_VERIFICATION\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".hadoop.hdfs.DataTransferEncryptorMessageProto.DataTransferEncryptorStatus\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\",MName \"DataTransferEncryptorMessageProto\"], baseName = MName \"DataTransferEncryptorStatus\"}, enumFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"DataTransferEncryptorMessageProto\",\"DataTransferEncryptorStatus.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"SUCCESS\"),(EnumCode {getEnumCode = 1},\"ERROR_UNKNOWN_KEY\"),(EnumCode {getEnumCode = 2},\"ERROR\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".hadoop.hdfs.OpWriteBlockProto.BlockConstructionStage\", haskellPrefix = [MName \"Hadoop\",MName \"Protos\"], parentModule = [MName \"DataTransferProtos\",MName \"OpWriteBlockProto\"], baseName = MName \"BlockConstructionStage\"}, enumFilePath = [\"Hadoop\",\"Protos\",\"DataTransferProtos\",\"OpWriteBlockProto\",\"BlockConstructionStage.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"PIPELINE_SETUP_APPEND\"),(EnumCode {getEnumCode = 1},\"PIPELINE_SETUP_APPEND_RECOVERY\"),(EnumCode {getEnumCode = 2},\"DATA_STREAMING\"),(EnumCode {getEnumCode = 3},\"PIPELINE_SETUP_STREAMING_RECOVERY\"),(EnumCode {getEnumCode = 4},\"PIPELINE_CLOSE\"),(EnumCode {getEnumCode = 5},\"PIPELINE_CLOSE_RECOVERY\"),(EnumCode {getEnumCode = 6},\"PIPELINE_SETUP_CREATE\"),(EnumCode {getEnumCode = 7},\"TRANSFER_RBW\"),(EnumCode {getEnumCode = 8},\"TRANSFER_FINALIZED\")]}], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\208\128\SOH\n\DC2datatransfer.proto\DC2\vhadoop.hdfs\SUB\SOSecurity.proto\SUB\nhdfs.proto\"\165\STX\n!DataTransferEncryptorMessageProto\DC2Z\n\ACKstatus\CAN\SOH \STX(\SO2J.hadoop.hdfs.DataTransferEncryptorMessageProto.DataTransferEncryptorStatus\DC2\SI\n\apayload\CAN\STX \SOH(\f\DC2\SI\n\amessage\CAN\ETX \SOH(\t\DC24\n\fcipherOption\CAN\EOT \ETX(\v2\RS.hadoop.hdfs.CipherOptionProto\"L\n\ESCDataTransferEncryptorStatus\DC2\v\n\aSUCCESS\DLE\NUL\DC2\NAK\n\DC1ERROR_UNKNOWN_KEY\DLE\SOH\DC2\t\n\ENQERROR\DLE\STX\"\167\SOH\n\SIBaseHeaderProto\DC2.\n\ENQblock\CAN\SOH \STX(\v2\US.hadoop.hdfs.ExtendedBlockProto\DC2(\n\ENQtoken\CAN\STX \SOH(\v2\EM.hadoop.common.TokenProto\DC2:\n\ttraceInfo\CAN\ETX \SOH(\v2'.hadoop.hdfs.DataTransferTraceInfoProto\"?\n\SUBDataTransferTraceInfoProto\DC2\SI\n\atraceId\CAN\SOH \STX(\EOT\DC2\DLE\n\bparentId\CAN\STX \STX(\EOT\"b\n\SUBClientOperationHeaderProto\DC20\n\nbaseHeader\CAN\SOH \STX(\v2\FS.hadoop.hdfs.BaseHeaderProto\DC2\DC2\n\nclientName\CAN\STX \STX(\t\"=\n\DC4CachingStrategyProto\DC2\DC2\n\ndropBehind\CAN\SOH \SOH(\b\DC2\DC1\n\treadahead\CAN\STX \SOH(\ETX\"\193\SOH\n\DLEOpReadBlockProto\DC27\n\ACKheader\CAN\SOH \STX(\v2'.hadoop.hdfs.ClientOperationHeaderProto\DC2\SO\n\ACKoffset\CAN\STX \STX(\EOT\DC2\v\n\ETXlen\CAN\ETX \STX(\EOT\DC2\ESC\n\rsendChecksums\CAN\EOT \SOH(\b:\EOTtrue\DC2:\n\SIcachingStrategy\CAN\ENQ \SOH(\v2!.hadoop.hdfs.CachingStrategyProto\"W\n\rChecksumProto\DC2,\n\EOTtype\CAN\SOH \STX(\SO2\RS.hadoop.hdfs.ChecksumTypeProto\DC2\CAN\n\DLEbytesPerChecksum\CAN\STX \STX(\r\"\152\a\n\DC1OpWriteBlockProto\DC27\n\ACKheader\CAN\SOH \STX(\v2'.hadoop.hdfs.ClientOperationHeaderProto\DC2/\n\atargets\CAN\STX \ETX(\v2\RS.hadoop.hdfs.DatanodeInfoProto\DC2.\n\ACKsource\CAN\ETX \SOH(\v2\RS.hadoop.hdfs.DatanodeInfoProto\DC2D\n\ENQstage\CAN\EOT \STX(\SO25.hadoop.hdfs.OpWriteBlockProto.BlockConstructionStage\DC2\DC4\n\fpipelineSize\CAN\ENQ \STX(\r\DC2\DC4\n\fminBytesRcvd\CAN\ACK \STX(\EOT\DC2\DC4\n\fmaxBytesRcvd\CAN\a \STX(\EOT\DC2\GS\n\NAKlatestGenerationStamp\CAN\b \STX(\EOT\DC25\n\DC1requestedChecksum\CAN\t \STX(\v2\SUB.hadoop.hdfs.ChecksumProto\DC2:\n\SIcachingStrategy\CAN\n \SOH(\v2!.hadoop.hdfs.CachingStrategyProto\DC28\n\vstorageType\CAN\v \SOH(\SO2\GS.hadoop.hdfs.StorageTypeProto:\EOTDISK\DC29\n\DC2targetStorageTypes\CAN\f \ETX(\SO2\GS.hadoop.hdfs.StorageTypeProto\DC2\US\n\DLEallowLazyPersist\CAN\r \SOH(\b:\ENQfalse\DC2\SYN\n\apinning\CAN\SO \SOH(\b:\ENQfalse\DC2\SYN\n\SOtargetPinnings\CAN\SI \ETX(\b\"\136\STX\n\SYNBlockConstructionStage\DC2\EM\n\NAKPIPELINE_SETUP_APPEND\DLE\NUL\DC2\"\n\RSPIPELINE_SETUP_APPEND_RECOVERY\DLE\SOH\DC2\DC2\n\SODATA_STREAMING\DLE\STX\DC2%\n!PIPELINE_SETUP_STREAMING_RECOVERY\DLE\ETX\DC2\DC2\n\SOPIPELINE_CLOSE\DLE\EOT\DC2\ESC\n\ETBPIPELINE_CLOSE_RECOVERY\DLE\ENQ\DC2\EM\n\NAKPIPELINE_SETUP_CREATE\DLE\ACK\DC2\DLE\n\fTRANSFER_RBW\DLE\a\DC2\SYN\n\DC2TRANSFER_FINALIZED\DLE\b\"\187\SOH\n\DC4OpTransferBlockProto\DC27\n\ACKheader\CAN\SOH \STX(\v2'.hadoop.hdfs.ClientOperationHeaderProto\DC2/\n\atargets\CAN\STX \ETX(\v2\RS.hadoop.hdfs.DatanodeInfoProto\DC29\n\DC2targetStorageTypes\CAN\ETX \ETX(\SO2\GS.hadoop.hdfs.StorageTypeProto\"\190\SOH\n\DC3OpReplaceBlockProto\DC2,\n\ACKheader\CAN\SOH \STX(\v2\FS.hadoop.hdfs.BaseHeaderProto\DC2\SI\n\adelHint\CAN\STX \STX(\t\DC2.\n\ACKsource\CAN\ETX \STX(\v2\RS.hadoop.hdfs.DatanodeInfoProto\DC28\n\vstorageType\CAN\EOT \SOH(\SO2\GS.hadoop.hdfs.StorageTypeProto:\EOTDISK\"@\n\DLEOpCopyBlockProto\DC2,\n\ACKheader\CAN\SOH \STX(\v2\FS.hadoop.hdfs.BaseHeaderProto\"D\n\DC4OpBlockChecksumProto\DC2,\n\ACKheader\CAN\SOH \STX(\v2\FS.hadoop.hdfs.BaseHeaderProto\"0\n\SYNShortCircuitShmIdProto\DC2\n\n\STXhi\CAN\SOH \STX(\ETX\DC2\n\n\STXlo\CAN\STX \STX(\ETX\"_\n\CANShortCircuitShmSlotProto\DC22\n\ENQshmId\CAN\SOH \STX(\v2#.hadoop.hdfs.ShortCircuitShmIdProto\DC2\SI\n\aslotIdx\CAN\STX \STX(\ENQ\"\199\SOH\n OpRequestShortCircuitAccessProto\DC2,\n\ACKheader\CAN\SOH \STX(\v2\FS.hadoop.hdfs.BaseHeaderProto\DC2\DC2\n\nmaxVersion\CAN\STX \STX(\r\DC25\n\ACKslotId\CAN\ETX \SOH(\v2%.hadoop.hdfs.ShortCircuitShmSlotProto\DC2*\n\ESCsupportsReceiptVerification\CAN\EOT \SOH(\b:\ENQfalse\"\154\SOH\n%ReleaseShortCircuitAccessRequestProto\DC25\n\ACKslotId\CAN\SOH \STX(\v2%.hadoop.hdfs.ShortCircuitShmSlotProto\DC2:\n\ttraceInfo\CAN\STX \SOH(\v2'.hadoop.hdfs.DataTransferTraceInfoProto\"\\\n&ReleaseShortCircuitAccessResponseProto\DC2#\n\ACKstatus\CAN\SOH \STX(\SO2\DC3.hadoop.hdfs.Status\DC2\r\n\ENQerror\CAN\STX \SOH(\t\"m\n\ESCShortCircuitShmRequestProto\DC2\DC2\n\nclientName\CAN\SOH \STX(\t\DC2:\n\ttraceInfo\CAN\STX \SOH(\v2'.hadoop.hdfs.DataTransferTraceInfoProto\"\131\SOH\n\FSShortCircuitShmResponseProto\DC2#\n\ACKstatus\CAN\SOH \STX(\SO2\DC3.hadoop.hdfs.Status\DC2\r\n\ENQerror\CAN\STX \SOH(\t\DC2/\n\STXid\CAN\ETX \SOH(\v2#.hadoop.hdfs.ShortCircuitShmIdProto\"\DEL\n\DC1PacketHeaderProto\DC2\NAK\n\roffsetInBlock\CAN\SOH \STX(\DLE\DC2\r\n\ENQseqno\CAN\STX \STX(\DLE\DC2\EM\n\DC1lastPacketInBlock\CAN\ETX \STX(\b\DC2\SI\n\adataLen\CAN\EOT \STX(\SI\DC2\CAN\n\tsyncBlock\CAN\ENQ \SOH(\b:\ENQfalse\"~\n\DLEPipelineAckProto\DC2\r\n\ENQseqno\CAN\SOH \STX(\DC2\DC2\"\n\ENQreply\CAN\STX \ETX(\SO2\DC3.hadoop.hdfs.Status\DC2!\n\SYNdownstreamAckTimeNanos\CAN\ETX \SOH(\EOT:\SOH0\DC2\DC4\n\EOTflag\CAN\EOT \ETX(\rB\ACK\b\NUL\DLE\SOH\CAN\NUL\"\\\n\ETBReadOpChecksumInfoProto\DC2,\n\bchecksum\CAN\SOH \STX(\v2\SUB.hadoop.hdfs.ChecksumProto\DC2\DC3\n\vchunkOffset\CAN\STX \STX(\EOT\"\140\STX\n\DC4BlockOpResponseProto\DC2#\n\ACKstatus\CAN\SOH \STX(\SO2\DC3.hadoop.hdfs.Status\DC2\DC4\n\ffirstBadLink\CAN\STX \SOH(\t\DC2C\n\DLEchecksumResponse\CAN\ETX \SOH(\v2).hadoop.hdfs.OpBlockChecksumResponseProto\DC2@\n\DC2readOpChecksumInfo\CAN\EOT \SOH(\v2$.hadoop.hdfs.ReadOpChecksumInfoProto\DC2\SI\n\amessage\CAN\ENQ \SOH(\t\DC2!\n\EMshortCircuitAccessVersion\CAN\ACK \SOH(\r\"<\n\NAKClientReadStatusProto\DC2#\n\ACKstatus\CAN\SOH \STX(\SO2\DC3.hadoop.hdfs.Status\"9\n\DC2DNTransferAckProto\DC2#\n\ACKstatus\CAN\SOH \STX(\SO2\DC3.hadoop.hdfs.Status\"\134\SOH\n\FSOpBlockChecksumResponseProto\DC2\DC3\n\vbytesPerCrc\CAN\SOH \STX(\r\DC2\DC3\n\vcrcPerBlock\CAN\STX \STX(\EOT\DC2\v\n\ETXmd5\CAN\ETX \STX(\f\DC2/\n\acrcType\CAN\EOT \SOH(\SO2\RS.hadoop.hdfs.ChecksumTypeProto*\244\SOH\n\ACKStatus\DC2\v\n\aSUCCESS\DLE\NUL\DC2\t\n\ENQERROR\DLE\SOH\DC2\DC2\n\SOERROR_CHECKSUM\DLE\STX\DC2\DC1\n\rERROR_INVALID\DLE\ETX\DC2\DLE\n\fERROR_EXISTS\DLE\EOT\DC2\SYN\n\DC2ERROR_ACCESS_TOKEN\DLE\ENQ\DC2\SI\n\vCHECKSUM_OK\DLE\ACK\DC2\NAK\n\DC1ERROR_UNSUPPORTED\DLE\a\DC2\SI\n\vOOB_RESTART\DLE\b\DC2\DC1\n\rOOB_RESERVED1\DLE\t\DC2\DC1\n\rOOB_RESERVED2\DLE\n\DC2\DC1\n\rOOB_RESERVED3\DLE\v\DC2\SI\n\vIN_PROGRESS\DLE\f*[\n\SYNShortCircuitFdResponse\DC2#\n\USDO_NOT_USE_RECEIPT_VERIFICATION\DLE\NUL\DC2\FS\n\CANUSE_RECEIPT_VERIFICATION\DLE\SOHBK\n%org.apache.hadoop.hdfs.protocol.protoB\DC2DataTransferProtosH\SOHP\NUL\128\SOH\NUL\136\SOH\NUL\144\SOH\NUL\160\SOH\SOHJ\189\\\n\t\n\NUL\DC2\ENQ\ESC\NUL\175\STX\SOH\n\b\n\SOH\b\DC2\ETX\ESC\NUL>\n\189\b\n\EOT\b\231\a\NUL\DC2\ETX\ESC\NUL>2\131\ACK*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n2\170\SOH*\n These .proto interfaces are private and stable.\n Please see http://wiki.apache.org/hadoop/Compatibility\n for what changes are allowed for a *stable* .proto interface.\n2} This file contains protocol buffers that are used to transfer data\n to and from the datanode, as well as between datanodes.\n\n\f\n\ENQ\b\231\a\NUL\STX\DC2\ETX\ESC\a\DC3\n\r\n\ACK\b\231\a\NUL\STX\NUL\DC2\ETX\ESC\a\DC3\n\SO\n\a\b\231\a\NUL\STX\NUL\SOH\DC2\ETX\ESC\a\DC3\n\f\n\ENQ\b\231\a\NUL\a\DC2\ETX\ESC\SYN=\n\b\n\SOH\b\DC2\ETX\FS\NUL3\n\v\n\EOT\b\231\a\SOH\DC2\ETX\FS\NUL3\n\f\n\ENQ\b\231\a\SOH\STX\DC2\ETX\FS\a\ESC\n\r\n\ACK\b\231\a\SOH\STX\NUL\DC2\ETX\FS\a\ESC\n\SO\n\a\b\231\a\SOH\STX\NUL\SOH\DC2\ETX\FS\a\ESC\n\f\n\ENQ\b\231\a\SOH\a\DC2\ETX\FS\RS2\n\b\n\SOH\b\DC2\ETX\GS\NUL,\n\v\n\EOT\b\231\a\STX\DC2\ETX\GS\NUL,\n\f\n\ENQ\b\231\a\STX\STX\DC2\ETX\GS\a$\n\r\n\ACK\b\231\a\STX\STX\NUL\DC2\ETX\GS\a$\n\SO\n\a\b\231\a\STX\STX\NUL\SOH\DC2\ETX\GS\a$\n\f\n\ENQ\b\231\a\STX\ETX\DC2\ETX\GS'+\n\b\n\SOH\STX\DC2\ETX\RS\b\DC3\n\t\n\STX\ETX\NUL\DC2\ETX \a\ETB\n\t\n\STX\ETX\SOH\DC2\ETX!\a\DC3\n\n\n\STX\EOT\NUL\DC2\EOT#\NUL-\SOH\n\n\n\ETX\EOT\NUL\SOH\DC2\ETX#\b)\n\f\n\EOT\EOT\NUL\EOT\NUL\DC2\EOT$\STX(\ETX\n\f\n\ENQ\EOT\NUL\EOT\NUL\SOH\DC2\ETX$\a\"\n\r\n\ACK\EOT\NUL\EOT\NUL\STX\NUL\DC2\ETX%\EOT\DLE\n\SO\n\a\EOT\NUL\EOT\NUL\STX\NUL\SOH\DC2\ETX%\EOT\v\n\SO\n\a\EOT\NUL\EOT\NUL\STX\NUL\STX\DC2\ETX%\SO\SI\n\r\n\ACK\EOT\NUL\EOT\NUL\STX\SOH\DC2\ETX&\EOT\SUB\n\SO\n\a\EOT\NUL\EOT\NUL\STX\SOH\SOH\DC2\ETX&\EOT\NAK\n\SO\n\a\EOT\NUL\EOT\NUL\STX\SOH\STX\DC2\ETX&\CAN\EM\n\r\n\ACK\EOT\NUL\EOT\NUL\STX\STX\DC2\ETX'\EOT\SO\n\SO\n\a\EOT\NUL\EOT\NUL\STX\STX\SOH\DC2\ETX'\EOT\t\n\SO\n\a\EOT\NUL\EOT\NUL\STX\STX\STX\DC2\ETX'\f\r\n\v\n\EOT\EOT\NUL\STX\NUL\DC2\ETX)\STX2\n\f\n\ENQ\EOT\NUL\STX\NUL\EOT\DC2\ETX)\STX\n\n\f\n\ENQ\EOT\NUL\STX\NUL\ACK\DC2\ETX)\v&\n\f\n\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETX)'-\n\f\n\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETX)01\n\v\n\EOT\EOT\NUL\STX\SOH\DC2\ETX*\STX\GS\n\f\n\ENQ\EOT\NUL\STX\SOH\EOT\DC2\ETX*\STX\n\n\f\n\ENQ\EOT\NUL\STX\SOH\ENQ\DC2\ETX*\v\DLE\n\f\n\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETX*\DC1\CAN\n\f\n\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETX*\ESC\FS\n\v\n\EOT\EOT\NUL\STX\STX\DC2\ETX+\STX\RS\n\f\n\ENQ\EOT\NUL\STX\STX\EOT\DC2\ETX+\STX\n\n\f\n\ENQ\EOT\NUL\STX\STX\ENQ\DC2\ETX+\v\DC1\n\f\n\ENQ\EOT\NUL\STX\STX\SOH\DC2\ETX+\DC2\EM\n\f\n\ENQ\EOT\NUL\STX\STX\ETX\DC2\ETX+\FS\GS\n\v\n\EOT\EOT\NUL\STX\ETX\DC2\ETX,\STX.\n\f\n\ENQ\EOT\NUL\STX\ETX\EOT\DC2\ETX,\STX\n\n\f\n\ENQ\EOT\NUL\STX\ETX\ACK\DC2\ETX,\v\FS\n\f\n\ENQ\EOT\NUL\STX\ETX\SOH\DC2\ETX,\GS)\n\f\n\ENQ\EOT\NUL\STX\ETX\ETX\DC2\ETX,,-\n\n\n\STX\EOT\SOH\DC2\EOT/\NUL3\SOH\n\n\n\ETX\EOT\SOH\SOH\DC2\ETX/\b\ETB\n\v\n\EOT\EOT\SOH\STX\NUL\DC2\ETX0\STX(\n\f\n\ENQ\EOT\SOH\STX\NUL\EOT\DC2\ETX0\STX\n\n\f\n\ENQ\EOT\SOH\STX\NUL\ACK\DC2\ETX0\v\GS\n\f\n\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETX0\RS#\n\f\n\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETX0&'\n\v\n\EOT\EOT\SOH\STX\SOH\DC2\ETX1\STX.\n\f\n\ENQ\EOT\SOH\STX\SOH\EOT\DC2\ETX1\STX\n\n\f\n\ENQ\EOT\SOH\STX\SOH\ACK\DC2\ETX1\v#\n\f\n\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETX1$)\n\f\n\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETX1,-\n\v\n\EOT\EOT\SOH\STX\STX\DC2\ETX2\STX4\n\f\n\ENQ\EOT\SOH\STX\STX\EOT\DC2\ETX2\STX\n\n\f\n\ENQ\EOT\SOH\STX\STX\ACK\DC2\ETX2\v%\n\f\n\ENQ\EOT\SOH\STX\STX\SOH\DC2\ETX2&/\n\f\n\ENQ\EOT\SOH\STX\STX\ETX\DC2\ETX223\n\n\n\STX\EOT\STX\DC2\EOT5\NUL8\SOH\n\n\n\ETX\EOT\STX\SOH\DC2\ETX5\b\"\n\v\n\EOT\EOT\STX\STX\NUL\DC2\ETX6\STX\RS\n\f\n\ENQ\EOT\STX\STX\NUL\EOT\DC2\ETX6\STX\n\n\f\n\ENQ\EOT\STX\STX\NUL\ENQ\DC2\ETX6\v\DC1\n\f\n\ENQ\EOT\STX\STX\NUL\SOH\DC2\ETX6\DC2\EM\n\f\n\ENQ\EOT\STX\STX\NUL\ETX\DC2\ETX6\FS\GS\n\v\n\EOT\EOT\STX\STX\SOH\DC2\ETX7\STX\US\n\f\n\ENQ\EOT\STX\STX\SOH\EOT\DC2\ETX7\STX\n\n\f\n\ENQ\EOT\STX\STX\SOH\ENQ\DC2\ETX7\v\DC1\n\f\n\ENQ\EOT\STX\STX\SOH\SOH\DC2\ETX7\DC2\SUB\n\f\n\ENQ\EOT\STX\STX\SOH\ETX\DC2\ETX7\GS\RS\n\n\n\STX\EOT\ETX\DC2\EOT:\NUL=\SOH\n\n\n\ETX\EOT\ETX\SOH\DC2\ETX:\b\"\n\v\n\EOT\EOT\ETX\STX\NUL\DC2\ETX;\STX*\n\f\n\ENQ\EOT\ETX\STX\NUL\EOT\DC2\ETX;\STX\n\n\f\n\ENQ\EOT\ETX\STX\NUL\ACK\DC2\ETX;\v\SUB\n\f\n\ENQ\EOT\ETX\STX\NUL\SOH\DC2\ETX;\ESC%\n\f\n\ENQ\EOT\ETX\STX\NUL\ETX\DC2\ETX;()\n\v\n\EOT\EOT\ETX\STX\SOH\DC2\ETX<\STX!\n\f\n\ENQ\EOT\ETX\STX\SOH\EOT\DC2\ETX<\STX\n\n\f\n\ENQ\EOT\ETX\STX\SOH\ENQ\DC2\ETX<\v\DC1\n\f\n\ENQ\EOT\ETX\STX\SOH\SOH\DC2\ETX<\DC2\FS\n\f\n\ENQ\EOT\ETX\STX\SOH\ETX\DC2\ETX<\US \n\n\n\STX\EOT\EOT\DC2\EOT?\NULB\SOH\n\n\n\ETX\EOT\EOT\SOH\DC2\ETX?\b\FS\n\v\n\EOT\EOT\EOT\STX\NUL\DC2\ETX@\STX\US\n\f\n\ENQ\EOT\EOT\STX\NUL\EOT\DC2\ETX@\STX\n\n\f\n\ENQ\EOT\EOT\STX\NUL\ENQ\DC2\ETX@\v\SI\n\f\n\ENQ\EOT\EOT\STX\NUL\SOH\DC2\ETX@\DLE\SUB\n\f\n\ENQ\EOT\EOT\STX\NUL\ETX\DC2\ETX@\GS\RS\n\v\n\EOT\EOT\EOT\STX\SOH\DC2\ETXA\STX\US\n\f\n\ENQ\EOT\EOT\STX\SOH\EOT\DC2\ETXA\STX\n\n\f\n\ENQ\EOT\EOT\STX\SOH\ENQ\DC2\ETXA\v\DLE\n\f\n\ENQ\EOT\EOT\STX\SOH\SOH\DC2\ETXA\DC1\SUB\n\f\n\ENQ\EOT\EOT\STX\SOH\ETX\DC2\ETXA\GS\RS\n\n\n\STX\EOT\ENQ\DC2\EOTD\NULJ\SOH\n\n\n\ETX\EOT\ENQ\SOH\DC2\ETXD\b\CAN\n\v\n\EOT\EOT\ENQ\STX\NUL\DC2\ETXE\STX1\n\f\n\ENQ\EOT\ENQ\STX\NUL\EOT\DC2\ETXE\STX\n\n\f\n\ENQ\EOT\ENQ\STX\NUL\ACK\DC2\ETXE\v%\n\f\n\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\ETXE&,\n\f\n\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\ETXE/0\n\v\n\EOT\EOT\ENQ\STX\SOH\DC2\ETXF\STX\GS\n\f\n\ENQ\EOT\ENQ\STX\SOH\EOT\DC2\ETXF\STX\n\n\f\n\ENQ\EOT\ENQ\STX\SOH\ENQ\DC2\ETXF\v\DC1\n\f\n\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\ETXF\DC2\CAN\n\f\n\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\ETXF\ESC\FS\n\v\n\EOT\EOT\ENQ\STX\STX\DC2\ETXG\STX\SUB\n\f\n\ENQ\EOT\ENQ\STX\STX\EOT\DC2\ETXG\STX\n\n\f\n\ENQ\EOT\ENQ\STX\STX\ENQ\DC2\ETXG\v\DC1\n\f\n\ENQ\EOT\ENQ\STX\STX\SOH\DC2\ETXG\DC2\NAK\n\f\n\ENQ\EOT\ENQ\STX\STX\ETX\DC2\ETXG\CAN\EM\n\v\n\EOT\EOT\ENQ\STX\ETX\DC2\ETXH\STX3\n\f\n\ENQ\EOT\ENQ\STX\ETX\EOT\DC2\ETXH\STX\n\n\f\n\ENQ\EOT\ENQ\STX\ETX\ENQ\DC2\ETXH\v\SI\n\f\n\ENQ\EOT\ENQ\STX\ETX\SOH\DC2\ETXH\DLE\GS\n\f\n\ENQ\EOT\ENQ\STX\ETX\ETX\DC2\ETXH !\n\f\n\ENQ\EOT\ENQ\STX\ETX\b\DC2\ETXH\"2\n\f\n\ENQ\EOT\ENQ\STX\ETX\a\DC2\ETXH-1\n\v\n\EOT\EOT\ENQ\STX\EOT\DC2\ETXI\STX4\n\f\n\ENQ\EOT\ENQ\STX\EOT\EOT\DC2\ETXI\STX\n\n\f\n\ENQ\EOT\ENQ\STX\EOT\ACK\DC2\ETXI\v\US\n\f\n\ENQ\EOT\ENQ\STX\EOT\SOH\DC2\ETXI /\n\f\n\ENQ\EOT\ENQ\STX\EOT\ETX\DC2\ETXI23\n\n\n\STX\EOT\ACK\DC2\EOTM\NULP\SOH\n\n\n\ETX\EOT\ACK\SOH\DC2\ETXM\b\NAK\n\v\n\EOT\EOT\ACK\STX\NUL\DC2\ETXN\STX&\n\f\n\ENQ\EOT\ACK\STX\NUL\EOT\DC2\ETXN\STX\n\n\f\n\ENQ\EOT\ACK\STX\NUL\ACK\DC2\ETXN\v\FS\n\f\n\ENQ\EOT\ACK\STX\NUL\SOH\DC2\ETXN\GS!\n\f\n\ENQ\EOT\ACK\STX\NUL\ETX\DC2\ETXN$%\n\v\n\EOT\EOT\ACK\STX\SOH\DC2\ETXO\STX'\n\f\n\ENQ\EOT\ACK\STX\SOH\EOT\DC2\ETXO\STX\n\n\f\n\ENQ\EOT\ACK\STX\SOH\ENQ\DC2\ETXO\v\DC1\n\f\n\ENQ\EOT\ACK\STX\SOH\SOH\DC2\ETXO\DC2\"\n\f\n\ENQ\EOT\ACK\STX\SOH\ETX\DC2\ETXO%&\n\v\n\STX\EOT\a\DC2\ENQR\NUL\128\SOH\SOH\n\n\n\ETX\EOT\a\SOH\DC2\ETXR\b\EM\n\v\n\EOT\EOT\a\STX\NUL\DC2\ETXS\STX1\n\f\n\ENQ\EOT\a\STX\NUL\EOT\DC2\ETXS\STX\n\n\f\n\ENQ\EOT\a\STX\NUL\ACK\DC2\ETXS\v%\n\f\n\ENQ\EOT\a\STX\NUL\SOH\DC2\ETXS&,\n\f\n\ENQ\EOT\a\STX\NUL\ETX\DC2\ETXS/0\n\v\n\EOT\EOT\a\STX\SOH\DC2\ETXT\STX)\n\f\n\ENQ\EOT\a\STX\SOH\EOT\DC2\ETXT\STX\n\n\f\n\ENQ\EOT\a\STX\SOH\ACK\DC2\ETXT\v\FS\n\f\n\ENQ\EOT\a\STX\SOH\SOH\DC2\ETXT\GS$\n\f\n\ENQ\EOT\a\STX\SOH\ETX\DC2\ETXT'(\n\v\n\EOT\EOT\a\STX\STX\DC2\ETXU\STX(\n\f\n\ENQ\EOT\a\STX\STX\EOT\DC2\ETXU\STX\n\n\f\n\ENQ\EOT\a\STX\STX\ACK\DC2\ETXU\v\FS\n\f\n\ENQ\EOT\a\STX\STX\SOH\DC2\ETXU\GS#\n\f\n\ENQ\EOT\a\STX\STX\ETX\DC2\ETXU&'\n\f\n\EOT\EOT\a\EOT\NUL\DC2\EOTV\STXh\ETX\n\f\n\ENQ\EOT\a\EOT\NUL\SOH\DC2\ETXV\a\GS\n\r\n\ACK\EOT\a\EOT\NUL\STX\NUL\DC2\ETXW\EOT\RS\n\SO\n\a\EOT\a\EOT\NUL\STX\NUL\SOH\DC2\ETXW\EOT\EM\n\SO\n\a\EOT\a\EOT\NUL\STX\NUL\STX\DC2\ETXW\FS\GS\nJ\n\ACK\EOT\a\EOT\NUL\STX\SOH\DC2\ETXY\EOT'\SUB; pipeline set up for failed PIPELINE_SETUP_APPEND recovery\n\n\SO\n\a\EOT\a\EOT\NUL\STX\SOH\SOH\DC2\ETXY\EOT\"\n\SO\n\a\EOT\a\EOT\NUL\STX\SOH\STX\DC2\ETXY%&\n\US\n\ACK\EOT\a\EOT\NUL\STX\STX\DC2\ETX[\EOT\ETB\SUB\DLE data streaming\n\n\SO\n\a\EOT\a\EOT\NUL\STX\STX\SOH\DC2\ETX[\EOT\DC2\n\SO\n\a\EOT\a\EOT\NUL\STX\STX\STX\DC2\ETX[\NAK\SYN\nB\n\ACK\EOT\a\EOT\NUL\STX\ETX\DC2\ETX]\EOT*\SUB3 pipeline setup for failed data streaming recovery\n\n\SO\n\a\EOT\a\EOT\NUL\STX\ETX\SOH\DC2\ETX]\EOT%\n\SO\n\a\EOT\a\EOT\NUL\STX\ETX\STX\DC2\ETX]()\n-\n\ACK\EOT\a\EOT\NUL\STX\EOT\DC2\ETX_\EOT\ETB\SUB\RS close the block and pipeline\n\n\SO\n\a\EOT\a\EOT\NUL\STX\EOT\SOH\DC2\ETX_\EOT\DC2\n\SO\n\a\EOT\a\EOT\NUL\STX\EOT\STX\DC2\ETX_\NAK\SYN\n0\n\ACK\EOT\a\EOT\NUL\STX\ENQ\DC2\ETXa\EOT \SUB! Recover a failed PIPELINE_CLOSE\n\n\SO\n\a\EOT\a\EOT\NUL\STX\ENQ\SOH\DC2\ETXa\EOT\ESC\n\SO\n\a\EOT\a\EOT\NUL\STX\ENQ\STX\DC2\ETXa\RS\US\n3\n\ACK\EOT\a\EOT\NUL\STX\ACK\DC2\ETXc\EOT\RS\SUB$ pipeline set up for block creation\n\n\SO\n\a\EOT\a\EOT\NUL\STX\ACK\SOH\DC2\ETXc\EOT\EM\n\SO\n\a\EOT\a\EOT\NUL\STX\ACK\STX\DC2\ETXc\FS\GS\n2\n\ACK\EOT\a\EOT\NUL\STX\a\DC2\ETXe\EOT\NAK\SUB# transfer RBW for adding datanodes\n\n\SO\n\a\EOT\a\EOT\NUL\STX\a\SOH\DC2\ETXe\EOT\DLE\n\SO\n\a\EOT\a\EOT\NUL\STX\a\STX\DC2\ETXe\DC3\DC4\n8\n\ACK\EOT\a\EOT\NUL\STX\b\DC2\ETXg\EOT\ESC\SUB) transfer Finalized for adding datanodes\n\n\SO\n\a\EOT\a\EOT\NUL\STX\b\SOH\DC2\ETXg\EOT\SYN\n\SO\n\a\EOT\a\EOT\NUL\STX\b\STX\DC2\ETXg\EM\SUB\n\v\n\EOT\EOT\a\STX\ETX\DC2\ETXi\STX,\n\f\n\ENQ\EOT\a\STX\ETX\EOT\DC2\ETXi\STX\n\n\f\n\ENQ\EOT\a\STX\ETX\ACK\DC2\ETXi\v!\n\f\n\ENQ\EOT\a\STX\ETX\SOH\DC2\ETXi\"'\n\f\n\ENQ\EOT\a\STX\ETX\ETX\DC2\ETXi*+\n\v\n\EOT\EOT\a\STX\EOT\DC2\ETXj\STX#\n\f\n\ENQ\EOT\a\STX\EOT\EOT\DC2\ETXj\STX\n\n\f\n\ENQ\EOT\a\STX\EOT\ENQ\DC2\ETXj\v\DC1\n\f\n\ENQ\EOT\a\STX\EOT\SOH\DC2\ETXj\DC2\RS\n\f\n\ENQ\EOT\a\STX\EOT\ETX\DC2\ETXj!\"\n\v\n\EOT\EOT\a\STX\ENQ\DC2\ETXk\STX#\n\f\n\ENQ\EOT\a\STX\ENQ\EOT\DC2\ETXk\STX\n\n\f\n\ENQ\EOT\a\STX\ENQ\ENQ\DC2\ETXk\v\DC1\n\f\n\ENQ\EOT\a\STX\ENQ\SOH\DC2\ETXk\DC2\RS\n\f\n\ENQ\EOT\a\STX\ENQ\ETX\DC2\ETXk!\"\n\v\n\EOT\EOT\a\STX\ACK\DC2\ETXl\STX#\n\f\n\ENQ\EOT\a\STX\ACK\EOT\DC2\ETXl\STX\n\n\f\n\ENQ\EOT\a\STX\ACK\ENQ\DC2\ETXl\v\DC1\n\f\n\ENQ\EOT\a\STX\ACK\SOH\DC2\ETXl\DC2\RS\n\f\n\ENQ\EOT\a\STX\ACK\ETX\DC2\ETXl!\"\n\v\n\EOT\EOT\a\STX\a\DC2\ETXm\STX,\n\f\n\ENQ\EOT\a\STX\a\EOT\DC2\ETXm\STX\n\n\f\n\ENQ\EOT\a\STX\a\ENQ\DC2\ETXm\v\DC1\n\f\n\ENQ\EOT\a\STX\a\SOH\DC2\ETXm\DC2'\n\f\n\ENQ\EOT\a\STX\a\ETX\DC2\ETXm*+\nG\n\EOT\EOT\a\STX\b\DC2\ETXr\STX/\SUB:*\n The requested checksum mechanism for this block write.\n\n\f\n\ENQ\EOT\a\STX\b\EOT\DC2\ETXr\STX\n\n\f\n\ENQ\EOT\a\STX\b\ACK\DC2\ETXr\v\CAN\n\f\n\ENQ\EOT\a\STX\b\SOH\DC2\ETXr\EM*\n\f\n\ENQ\EOT\a\STX\b\ETX\DC2\ETXr-.\n\v\n\EOT\EOT\a\STX\t\DC2\ETXs\STX5\n\f\n\ENQ\EOT\a\STX\t\EOT\DC2\ETXs\STX\n\n\f\n\ENQ\EOT\a\STX\t\ACK\DC2\ETXs\v\US\n\f\n\ENQ\EOT\a\STX\t\SOH\DC2\ETXs /\n\f\n\ENQ\EOT\a\STX\t\ETX\DC2\ETXs24\n\v\n\EOT\EOT\a\STX\n\DC2\ETXt\STX>\n\f\n\ENQ\EOT\a\STX\n\EOT\DC2\ETXt\STX\n\n\f\n\ENQ\EOT\a\STX\n\ACK\DC2\ETXt\v\ESC\n\f\n\ENQ\EOT\a\STX\n\SOH\DC2\ETXt\FS'\n\f\n\ENQ\EOT\a\STX\n\ETX\DC2\ETXt*,\n\f\n\ENQ\EOT\a\STX\n\b\DC2\ETXt-=\n\f\n\ENQ\EOT\a\STX\n\a\DC2\ETXt8<\n\v\n\EOT\EOT\a\STX\v\DC2\ETXu\STX4\n\f\n\ENQ\EOT\a\STX\v\EOT\DC2\ETXu\STX\n\n\f\n\ENQ\EOT\a\STX\v\ACK\DC2\ETXu\v\ESC\n\f\n\ENQ\EOT\a\STX\v\SOH\DC2\ETXu\FS.\n\f\n\ENQ\EOT\a\STX\v\ETX\DC2\ETXu13\n\175\SOH\n\EOT\EOT\a\STX\f\DC2\ETX|\STX8\SUB\161\SOH*\n Hint to the DataNode that the block can be allocated on transient\n storage i.e. memory and written to disk lazily. The DataNode is free\n to ignore this hint.\n\n\f\n\ENQ\EOT\a\STX\f\EOT\DC2\ETX|\STX\n\n\f\n\ENQ\EOT\a\STX\f\ENQ\DC2\ETX|\v\SI\n\f\n\ENQ\EOT\a\STX\f\SOH\DC2\ETX|\DLE \n\f\n\ENQ\EOT\a\STX\f\ETX\DC2\ETX|#%\n\f\n\ENQ\EOT\a\STX\f\b\DC2\ETX|&7\n\f\n\ENQ\EOT\a\STX\f\a\DC2\ETX|16\nB\n\EOT\EOT\a\STX\r\DC2\ETX~\STX/\SUB5whether to pin the block, so Balancer won't move it.\n\n\f\n\ENQ\EOT\a\STX\r\EOT\DC2\ETX~\STX\n\n\f\n\ENQ\EOT\a\STX\r\ENQ\DC2\ETX~\v\SI\n\f\n\ENQ\EOT\a\STX\r\SOH\DC2\ETX~\DLE\ETB\n\f\n\ENQ\EOT\a\STX\r\ETX\DC2\ETX~\SUB\FS\n\f\n\ENQ\EOT\a\STX\r\b\DC2\ETX~\GS.\n\f\n\ENQ\EOT\a\STX\r\a\DC2\ETX~(-\n\v\n\EOT\EOT\a\STX\SO\DC2\ETX\DEL\STX$\n\f\n\ENQ\EOT\a\STX\SO\EOT\DC2\ETX\DEL\STX\n\n\f\n\ENQ\EOT\a\STX\SO\ENQ\DC2\ETX\DEL\v\SI\n\f\n\ENQ\EOT\a\STX\SO\SOH\DC2\ETX\DEL\DLE\RS\n\f\n\ENQ\EOT\a\STX\SO\ETX\DC2\ETX\DEL!#\n\f\n\STX\EOT\b\DC2\ACK\130\SOH\NUL\134\SOH\SOH\n\v\n\ETX\EOT\b\SOH\DC2\EOT\130\SOH\b\FS\n\f\n\EOT\EOT\b\STX\NUL\DC2\EOT\131\SOH\STX1\n\r\n\ENQ\EOT\b\STX\NUL\EOT\DC2\EOT\131\SOH\STX\n\n\r\n\ENQ\EOT\b\STX\NUL\ACK\DC2\EOT\131\SOH\v%\n\r\n\ENQ\EOT\b\STX\NUL\SOH\DC2\EOT\131\SOH&,\n\r\n\ENQ\EOT\b\STX\NUL\ETX\DC2\EOT\131\SOH/0\n\f\n\EOT\EOT\b\STX\SOH\DC2\EOT\132\SOH\STX)\n\r\n\ENQ\EOT\b\STX\SOH\EOT\DC2\EOT\132\SOH\STX\n\n\r\n\ENQ\EOT\b\STX\SOH\ACK\DC2\EOT\132\SOH\v\FS\n\r\n\ENQ\EOT\b\STX\SOH\SOH\DC2\EOT\132\SOH\GS$\n\r\n\ENQ\EOT\b\STX\SOH\ETX\DC2\EOT\132\SOH'(\n\f\n\EOT\EOT\b\STX\STX\DC2\EOT\133\SOH\STX3\n\r\n\ENQ\EOT\b\STX\STX\EOT\DC2\EOT\133\SOH\STX\n\n\r\n\ENQ\EOT\b\STX\STX\ACK\DC2\EOT\133\SOH\v\ESC\n\r\n\ENQ\EOT\b\STX\STX\SOH\DC2\EOT\133\SOH\FS.\n\r\n\ENQ\EOT\b\STX\STX\ETX\DC2\EOT\133\SOH12\n\f\n\STX\EOT\t\DC2\ACK\136\SOH\NUL\141\SOH\SOH\n\v\n\ETX\EOT\t\SOH\DC2\EOT\136\SOH\b\ESC\n\f\n\EOT\EOT\t\STX\NUL\DC2\EOT\137\SOH\STX&\n\r\n\ENQ\EOT\t\STX\NUL\EOT\DC2\EOT\137\SOH\STX\n\n\r\n\ENQ\EOT\t\STX\NUL\ACK\DC2\EOT\137\SOH\v\SUB\n\r\n\ENQ\EOT\t\STX\NUL\SOH\DC2\EOT\137\SOH\ESC!\n\r\n\ENQ\EOT\t\STX\NUL\ETX\DC2\EOT\137\SOH$%\n\f\n\EOT\EOT\t\STX\SOH\DC2\EOT\138\SOH\STX\RS\n\r\n\ENQ\EOT\t\STX\SOH\EOT\DC2\EOT\138\SOH\STX\n\n\r\n\ENQ\EOT\t\STX\SOH\ENQ\DC2\EOT\138\SOH\v\DC1\n\r\n\ENQ\EOT\t\STX\SOH\SOH\DC2\EOT\138\SOH\DC2\EM\n\r\n\ENQ\EOT\t\STX\SOH\ETX\DC2\EOT\138\SOH\FS\GS\n\f\n\EOT\EOT\t\STX\STX\DC2\EOT\139\SOH\STX(\n\r\n\ENQ\EOT\t\STX\STX\EOT\DC2\EOT\139\SOH\STX\n\n\r\n\ENQ\EOT\t\STX\STX\ACK\DC2\EOT\139\SOH\v\FS\n\r\n\ENQ\EOT\t\STX\STX\SOH\DC2\EOT\139\SOH\GS#\n\r\n\ENQ\EOT\t\STX\STX\ETX\DC2\EOT\139\SOH&'\n\f\n\EOT\EOT\t\STX\ETX\DC2\EOT\140\SOH\STX=\n\r\n\ENQ\EOT\t\STX\ETX\EOT\DC2\EOT\140\SOH\STX\n\n\r\n\ENQ\EOT\t\STX\ETX\ACK\DC2\EOT\140\SOH\v\ESC\n\r\n\ENQ\EOT\t\STX\ETX\SOH\DC2\EOT\140\SOH\FS'\n\r\n\ENQ\EOT\t\STX\ETX\ETX\DC2\EOT\140\SOH*+\n\r\n\ENQ\EOT\t\STX\ETX\b\DC2\EOT\140\SOH,<\n\r\n\ENQ\EOT\t\STX\ETX\a\DC2\EOT\140\SOH7;\n\f\n\STX\EOT\n\DC2\ACK\143\SOH\NUL\145\SOH\SOH\n\v\n\ETX\EOT\n\SOH\DC2\EOT\143\SOH\b\CAN\n\f\n\EOT\EOT\n\STX\NUL\DC2\EOT\144\SOH\STX&\n\r\n\ENQ\EOT\n\STX\NUL\EOT\DC2\EOT\144\SOH\STX\n\n\r\n\ENQ\EOT\n\STX\NUL\ACK\DC2\EOT\144\SOH\v\SUB\n\r\n\ENQ\EOT\n\STX\NUL\SOH\DC2\EOT\144\SOH\ESC!\n\r\n\ENQ\EOT\n\STX\NUL\ETX\DC2\EOT\144\SOH$%\n\f\n\STX\EOT\v\DC2\ACK\147\SOH\NUL\149\SOH\SOH\n\v\n\ETX\EOT\v\SOH\DC2\EOT\147\SOH\b\FS\n\f\n\EOT\EOT\v\STX\NUL\DC2\EOT\148\SOH\STX&\n\r\n\ENQ\EOT\v\STX\NUL\EOT\DC2\EOT\148\SOH\STX\n\n\r\n\ENQ\EOT\v\STX\NUL\ACK\DC2\EOT\148\SOH\v\SUB\n\r\n\ENQ\EOT\v\STX\NUL\SOH\DC2\EOT\148\SOH\ESC!\n\r\n\ENQ\EOT\v\STX\NUL\ETX\DC2\EOT\148\SOH$%\nE\n\STX\EOT\f\DC2\ACK\154\SOH\NUL\157\SOH\SOH\SUB7*\n An ID uniquely identifying a shared memory segment.\n\n\v\n\ETX\EOT\f\SOH\DC2\EOT\154\SOH\b\RS\n\f\n\EOT\EOT\f\STX\NUL\DC2\EOT\155\SOH\STX\CAN\n\r\n\ENQ\EOT\f\STX\NUL\EOT\DC2\EOT\155\SOH\STX\n\n\r\n\ENQ\EOT\f\STX\NUL\ENQ\DC2\EOT\155\SOH\v\DLE\n\r\n\ENQ\EOT\f\STX\NUL\SOH\DC2\EOT\155\SOH\DC1\DC3\n\r\n\ENQ\EOT\f\STX\NUL\ETX\DC2\EOT\155\SOH\SYN\ETB\n\f\n\EOT\EOT\f\STX\SOH\DC2\EOT\156\SOH\STX\CAN\n\r\n\ENQ\EOT\f\STX\SOH\EOT\DC2\EOT\156\SOH\STX\n\n\r\n\ENQ\EOT\f\STX\SOH\ENQ\DC2\EOT\156\SOH\v\DLE\n\r\n\ENQ\EOT\f\STX\SOH\SOH\DC2\EOT\156\SOH\DC1\DC3\n\r\n\ENQ\EOT\f\STX\SOH\ETX\DC2\EOT\156\SOH\SYN\ETB\nS\n\STX\EOT\r\DC2\ACK\162\SOH\NUL\165\SOH\SOH\SUBE*\n An ID uniquely identifying a slot within a shared memory segment.\n\n\v\n\ETX\EOT\r\SOH\DC2\EOT\162\SOH\b \n\f\n\EOT\EOT\r\STX\NUL\DC2\EOT\163\SOH\STX,\n\r\n\ENQ\EOT\r\STX\NUL\EOT\DC2\EOT\163\SOH\STX\n\n\r\n\ENQ\EOT\r\STX\NUL\ACK\DC2\EOT\163\SOH\v!\n\r\n\ENQ\EOT\r\STX\NUL\SOH\DC2\EOT\163\SOH\"'\n\r\n\ENQ\EOT\r\STX\NUL\ETX\DC2\EOT\163\SOH*+\n\f\n\EOT\EOT\r\STX\SOH\DC2\EOT\164\SOH\STX\GS\n\r\n\ENQ\EOT\r\STX\SOH\EOT\DC2\EOT\164\SOH\STX\n\n\r\n\ENQ\EOT\r\STX\SOH\ENQ\DC2\EOT\164\SOH\v\DLE\n\r\n\ENQ\EOT\r\STX\SOH\SOH\DC2\EOT\164\SOH\DC1\CAN\n\r\n\ENQ\EOT\r\STX\SOH\ETX\DC2\EOT\164\SOH\ESC\FS\n\f\n\STX\EOT\SO\DC2\ACK\167\SOH\NUL\187\SOH\SOH\n\v\n\ETX\EOT\SO\SOH\DC2\EOT\167\SOH\b(\n\f\n\EOT\EOT\SO\STX\NUL\DC2\EOT\168\SOH\STX&\n\r\n\ENQ\EOT\SO\STX\NUL\EOT\DC2\EOT\168\SOH\STX\n\n\r\n\ENQ\EOT\SO\STX\NUL\ACK\DC2\EOT\168\SOH\v\SUB\n\r\n\ENQ\EOT\SO\STX\NUL\SOH\DC2\EOT\168\SOH\ESC!\n\r\n\ENQ\EOT\SO\STX\NUL\ETX\DC2\EOT\168\SOH$%\n\139\STX\n\EOT\EOT\SO\STX\SOH\DC2\EOT\175\SOH\STX!\SUB\252\SOH* In order to get short-circuit access to block data, clients must set this\n to the highest version of the block data that they can understand.\n Currently 1 is the only version, but more versions may exist in the future\n if the on-disk format changes.\n\n\r\n\ENQ\EOT\SO\STX\SOH\EOT\DC2\EOT\175\SOH\STX\n\n\r\n\ENQ\EOT\SO\STX\SOH\ENQ\DC2\EOT\175\SOH\v\DC1\n\r\n\ENQ\EOT\SO\STX\SOH\SOH\DC2\EOT\175\SOH\DC2\FS\n\r\n\ENQ\EOT\SO\STX\SOH\ETX\DC2\EOT\175\SOH\US \nE\n\EOT\EOT\SO\STX\STX\DC2\EOT\180\SOH\STX/\SUB7*\n The shared memory slot to use, if we are using one.\n\n\r\n\ENQ\EOT\SO\STX\STX\EOT\DC2\EOT\180\SOH\STX\n\n\r\n\ENQ\EOT\SO\STX\STX\ACK\DC2\EOT\180\SOH\v#\n\r\n\ENQ\EOT\SO\STX\STX\SOH\DC2\EOT\180\SOH$*\n\r\n\ENQ\EOT\SO\STX\STX\ETX\DC2\EOT\180\SOH-.\nm\n\EOT\EOT\SO\STX\ETX\DC2\EOT\186\SOH\STXB\SUB_*\n True if the client supports verifying that the file descriptor has been\n sent successfully.\n\n\r\n\ENQ\EOT\SO\STX\ETX\EOT\DC2\EOT\186\SOH\STX\n\n\r\n\ENQ\EOT\SO\STX\ETX\ENQ\DC2\EOT\186\SOH\v\SI\n\r\n\ENQ\EOT\SO\STX\ETX\SOH\DC2\EOT\186\SOH\DLE+\n\r\n\ENQ\EOT\SO\STX\ETX\ETX\DC2\EOT\186\SOH./\n\r\n\ENQ\EOT\SO\STX\ETX\b\DC2\EOT\186\SOH0A\n\r\n\ENQ\EOT\SO\STX\ETX\a\DC2\EOT\186\SOH;@\n\f\n\STX\EOT\SI\DC2\ACK\189\SOH\NUL\192\SOH\SOH\n\v\n\ETX\EOT\SI\SOH\DC2\EOT\189\SOH\b-\n\f\n\EOT\EOT\SI\STX\NUL\DC2\EOT\190\SOH\STX/\n\r\n\ENQ\EOT\SI\STX\NUL\EOT\DC2\EOT\190\SOH\STX\n\n\r\n\ENQ\EOT\SI\STX\NUL\ACK\DC2\EOT\190\SOH\v#\n\r\n\ENQ\EOT\SI\STX\NUL\SOH\DC2\EOT\190\SOH$*\n\r\n\ENQ\EOT\SI\STX\NUL\ETX\DC2\EOT\190\SOH-.\n\f\n\EOT\EOT\SI\STX\SOH\DC2\EOT\191\SOH\STX4\n\r\n\ENQ\EOT\SI\STX\SOH\EOT\DC2\EOT\191\SOH\STX\n\n\r\n\ENQ\EOT\SI\STX\SOH\ACK\DC2\EOT\191\SOH\v%\n\r\n\ENQ\EOT\SI\STX\SOH\SOH\DC2\EOT\191\SOH&/\n\r\n\ENQ\EOT\SI\STX\SOH\ETX\DC2\EOT\191\SOH23\n\f\n\STX\EOT\DLE\DC2\ACK\194\SOH\NUL\197\SOH\SOH\n\v\n\ETX\EOT\DLE\SOH\DC2\EOT\194\SOH\b.\n\f\n\EOT\EOT\DLE\STX\NUL\DC2\EOT\195\SOH\STX\GS\n\r\n\ENQ\EOT\DLE\STX\NUL\EOT\DC2\EOT\195\SOH\STX\n\n\r\n\ENQ\EOT\DLE\STX\NUL\ACK\DC2\EOT\195\SOH\v\DC1\n\r\n\ENQ\EOT\DLE\STX\NUL\SOH\DC2\EOT\195\SOH\DC2\CAN\n\r\n\ENQ\EOT\DLE\STX\NUL\ETX\DC2\EOT\195\SOH\ESC\FS\n\f\n\EOT\EOT\DLE\STX\SOH\DC2\EOT\196\SOH\STX\FS\n\r\n\ENQ\EOT\DLE\STX\SOH\EOT\DC2\EOT\196\SOH\STX\n\n\r\n\ENQ\EOT\DLE\STX\SOH\ENQ\DC2\EOT\196\SOH\v\DC1\n\r\n\ENQ\EOT\DLE\STX\SOH\SOH\DC2\EOT\196\SOH\DC2\ETB\n\r\n\ENQ\EOT\DLE\STX\SOH\ETX\DC2\EOT\196\SOH\SUB\ESC\n\f\n\STX\EOT\DC1\DC2\ACK\199\SOH\NUL\204\SOH\SOH\n\v\n\ETX\EOT\DC1\SOH\DC2\EOT\199\SOH\b#\n\DEL\n\EOT\EOT\DC1\STX\NUL\DC2\EOT\202\SOH\STX!\SUBq The name of the client requesting the shared memory segment.  This is\n purely for logging / debugging purposes.\n\n\r\n\ENQ\EOT\DC1\STX\NUL\EOT\DC2\EOT\202\SOH\STX\n\n\r\n\ENQ\EOT\DC1\STX\NUL\ENQ\DC2\EOT\202\SOH\v\DC1\n\r\n\ENQ\EOT\DC1\STX\NUL\SOH\DC2\EOT\202\SOH\DC2\FS\n\r\n\ENQ\EOT\DC1\STX\NUL\ETX\DC2\EOT\202\SOH\US \n\f\n\EOT\EOT\DC1\STX\SOH\DC2\EOT\203\SOH\STX4\n\r\n\ENQ\EOT\DC1\STX\SOH\EOT\DC2\EOT\203\SOH\STX\n\n\r\n\ENQ\EOT\DC1\STX\SOH\ACK\DC2\EOT\203\SOH\v%\n\r\n\ENQ\EOT\DC1\STX\SOH\SOH\DC2\EOT\203\SOH&/\n\r\n\ENQ\EOT\DC1\STX\SOH\ETX\DC2\EOT\203\SOH23\n\f\n\STX\EOT\DC2\DC2\ACK\206\SOH\NUL\210\SOH\SOH\n\v\n\ETX\EOT\DC2\SOH\DC2\EOT\206\SOH\b$\n\f\n\EOT\EOT\DC2\STX\NUL\DC2\EOT\207\SOH\STX\GS\n\r\n\ENQ\EOT\DC2\STX\NUL\EOT\DC2\EOT\207\SOH\STX\n\n\r\n\ENQ\EOT\DC2\STX\NUL\ACK\DC2\EOT\207\SOH\v\DC1\n\r\n\ENQ\EOT\DC2\STX\NUL\SOH\DC2\EOT\207\SOH\DC2\CAN\n\r\n\ENQ\EOT\DC2\STX\NUL\ETX\DC2\EOT\207\SOH\ESC\FS\n\f\n\EOT\EOT\DC2\STX\SOH\DC2\EOT\208\SOH\STX\FS\n\r\n\ENQ\EOT\DC2\STX\SOH\EOT\DC2\EOT\208\SOH\STX\n\n\r\n\ENQ\EOT\DC2\STX\SOH\ENQ\DC2\EOT\208\SOH\v\DC1\n\r\n\ENQ\EOT\DC2\STX\SOH\SOH\DC2\EOT\208\SOH\DC2\ETB\n\r\n\ENQ\EOT\DC2\STX\SOH\ETX\DC2\EOT\208\SOH\SUB\ESC\n\f\n\EOT\EOT\DC2\STX\STX\DC2\EOT\209\SOH\STX)\n\r\n\ENQ\EOT\DC2\STX\STX\EOT\DC2\EOT\209\SOH\STX\n\n\r\n\ENQ\EOT\DC2\STX\STX\ACK\DC2\EOT\209\SOH\v!\n\r\n\ENQ\EOT\DC2\STX\STX\SOH\DC2\EOT\209\SOH\"$\n\r\n\ENQ\EOT\DC2\STX\STX\ETX\DC2\EOT\209\SOH'(\n\f\n\STX\EOT\DC3\DC2\ACK\212\SOH\NUL\219\SOH\SOH\n\v\n\ETX\EOT\DC3\SOH\DC2\EOT\212\SOH\b\EM\n0\n\EOT\EOT\DC3\STX\NUL\DC2\EOT\214\SOH\STX&\SUB\" All fields must be fixed-length!\n\n\r\n\ENQ\EOT\DC3\STX\NUL\EOT\DC2\EOT\214\SOH\STX\n\n\r\n\ENQ\EOT\DC3\STX\NUL\ENQ\DC2\EOT\214\SOH\v\DC3\n\r\n\ENQ\EOT\DC3\STX\NUL\SOH\DC2\EOT\214\SOH\DC4!\n\r\n\ENQ\EOT\DC3\STX\NUL\ETX\DC2\EOT\214\SOH$%\n\f\n\EOT\EOT\DC3\STX\SOH\DC2\EOT\215\SOH\STX\RS\n\r\n\ENQ\EOT\DC3\STX\SOH\EOT\DC2\EOT\215\SOH\STX\n\n\r\n\ENQ\EOT\DC3\STX\SOH\ENQ\DC2\EOT\215\SOH\v\DC3\n\r\n\ENQ\EOT\DC3\STX\SOH\SOH\DC2\EOT\215\SOH\DC4\EM\n\r\n\ENQ\EOT\DC3\STX\SOH\ETX\DC2\EOT\215\SOH\FS\GS\n\f\n\EOT\EOT\DC3\STX\STX\DC2\EOT\216\SOH\STX&\n\r\n\ENQ\EOT\DC3\STX\STX\EOT\DC2\EOT\216\SOH\STX\n\n\r\n\ENQ\EOT\DC3\STX\STX\ENQ\DC2\EOT\216\SOH\v\SI\n\r\n\ENQ\EOT\DC3\STX\STX\SOH\DC2\EOT\216\SOH\DLE!\n\r\n\ENQ\EOT\DC3\STX\STX\ETX\DC2\EOT\216\SOH$%\n\f\n\EOT\EOT\DC3\STX\ETX\DC2\EOT\217\SOH\STX \n\r\n\ENQ\EOT\DC3\STX\ETX\EOT\DC2\EOT\217\SOH\STX\n\n\r\n\ENQ\EOT\DC3\STX\ETX\ENQ\DC2\EOT\217\SOH\v\DC3\n\r\n\ENQ\EOT\DC3\STX\ETX\SOH\DC2\EOT\217\SOH\DC4\ESC\n\r\n\ENQ\EOT\DC3\STX\ETX\ETX\DC2\EOT\217\SOH\RS\US\n\f\n\EOT\EOT\DC3\STX\EOT\DC2\EOT\218\SOH\STX0\n\r\n\ENQ\EOT\DC3\STX\EOT\EOT\DC2\EOT\218\SOH\STX\n\n\r\n\ENQ\EOT\DC3\STX\EOT\ENQ\DC2\EOT\218\SOH\v\SI\n\r\n\ENQ\EOT\DC3\STX\EOT\SOH\DC2\EOT\218\SOH\DLE\EM\n\r\n\ENQ\EOT\DC3\STX\EOT\ETX\DC2\EOT\218\SOH\FS\GS\n\r\n\ENQ\EOT\DC3\STX\EOT\b\DC2\EOT\218\SOH\RS/\n\r\n\ENQ\EOT\DC3\STX\EOT\a\DC2\EOT\218\SOH).\n&\n\STX\ENQ\NUL\DC2\ACK\222\SOH\NUL\236\SOH\SOH\SUB\CAN Status is a 4-bit enum\n\n\v\n\ETX\ENQ\NUL\SOH\DC2\EOT\222\SOH\ENQ\v\n\f\n\EOT\ENQ\NUL\STX\NUL\DC2\EOT\223\SOH\STX\SO\n\r\n\ENQ\ENQ\NUL\STX\NUL\SOH\DC2\EOT\223\SOH\STX\t\n\r\n\ENQ\ENQ\NUL\STX\NUL\STX\DC2\EOT\223\SOH\f\r\n\f\n\EOT\ENQ\NUL\STX\SOH\DC2\EOT\224\SOH\STX\f\n\r\n\ENQ\ENQ\NUL\STX\SOH\SOH\DC2\EOT\224\SOH\STX\a\n\r\n\ENQ\ENQ\NUL\STX\SOH\STX\DC2\EOT\224\SOH\n\v\n\f\n\EOT\ENQ\NUL\STX\STX\DC2\EOT\225\SOH\STX\NAK\n\r\n\ENQ\ENQ\NUL\STX\STX\SOH\DC2\EOT\225\SOH\STX\DLE\n\r\n\ENQ\ENQ\NUL\STX\STX\STX\DC2\EOT\225\SOH\DC3\DC4\n\f\n\EOT\ENQ\NUL\STX\ETX\DC2\EOT\226\SOH\STX\DC4\n\r\n\ENQ\ENQ\NUL\STX\ETX\SOH\DC2\EOT\226\SOH\STX\SI\n\r\n\ENQ\ENQ\NUL\STX\ETX\STX\DC2\EOT\226\SOH\DC2\DC3\n\f\n\EOT\ENQ\NUL\STX\EOT\DC2\EOT\227\SOH\STX\DC3\n\r\n\ENQ\ENQ\NUL\STX\EOT\SOH\DC2\EOT\227\SOH\STX\SO\n\r\n\ENQ\ENQ\NUL\STX\EOT\STX\DC2\EOT\227\SOH\DC1\DC2\n\f\n\EOT\ENQ\NUL\STX\ENQ\DC2\EOT\228\SOH\STX\EM\n\r\n\ENQ\ENQ\NUL\STX\ENQ\SOH\DC2\EOT\228\SOH\STX\DC4\n\r\n\ENQ\ENQ\NUL\STX\ENQ\STX\DC2\EOT\228\SOH\ETB\CAN\n\f\n\EOT\ENQ\NUL\STX\ACK\DC2\EOT\229\SOH\STX\DC2\n\r\n\ENQ\ENQ\NUL\STX\ACK\SOH\DC2\EOT\229\SOH\STX\r\n\r\n\ENQ\ENQ\NUL\STX\ACK\STX\DC2\EOT\229\SOH\DLE\DC1\n\f\n\EOT\ENQ\NUL\STX\a\DC2\EOT\230\SOH\STX\CAN\n\r\n\ENQ\ENQ\NUL\STX\a\SOH\DC2\EOT\230\SOH\STX\DC3\n\r\n\ENQ\ENQ\NUL\STX\a\STX\DC2\EOT\230\SOH\SYN\ETB\n\GS\n\EOT\ENQ\NUL\STX\b\DC2\EOT\231\SOH\STX\DC2\"\SI Quick restart\n\n\r\n\ENQ\ENQ\NUL\STX\b\SOH\DC2\EOT\231\SOH\STX\r\n\r\n\ENQ\ENQ\NUL\STX\b\STX\DC2\EOT\231\SOH\DLE\DC1\n\CAN\n\EOT\ENQ\NUL\STX\t\DC2\EOT\232\SOH\STX\DC4\"\n Reserved\n\n\r\n\ENQ\ENQ\NUL\STX\t\SOH\DC2\EOT\232\SOH\STX\SI\n\r\n\ENQ\ENQ\NUL\STX\t\STX\DC2\EOT\232\SOH\DC2\DC3\n\CAN\n\EOT\ENQ\NUL\STX\n\DC2\EOT\233\SOH\STX\NAK\"\n Reserved\n\n\r\n\ENQ\ENQ\NUL\STX\n\SOH\DC2\EOT\233\SOH\STX\SI\n\r\n\ENQ\ENQ\NUL\STX\n\STX\DC2\EOT\233\SOH\DC2\DC4\n\CAN\n\EOT\ENQ\NUL\STX\v\DC2\EOT\234\SOH\STX\NAK\"\n Reserved\n\n\r\n\ENQ\ENQ\NUL\STX\v\SOH\DC2\EOT\234\SOH\STX\SI\n\r\n\ENQ\ENQ\NUL\STX\v\STX\DC2\EOT\234\SOH\DC2\DC4\n\f\n\EOT\ENQ\NUL\STX\f\DC2\EOT\235\SOH\STX\DC3\n\r\n\ENQ\ENQ\NUL\STX\f\SOH\DC2\EOT\235\SOH\STX\r\n\r\n\ENQ\ENQ\NUL\STX\f\STX\DC2\EOT\235\SOH\DLE\DC2\n\f\n\STX\ENQ\SOH\DC2\ACK\238\SOH\NUL\241\SOH\SOH\n\v\n\ETX\ENQ\SOH\SOH\DC2\EOT\238\SOH\ENQ\ESC\n\f\n\EOT\ENQ\SOH\STX\NUL\DC2\EOT\239\SOH\STX&\n\r\n\ENQ\ENQ\SOH\STX\NUL\SOH\DC2\EOT\239\SOH\STX!\n\r\n\ENQ\ENQ\SOH\STX\NUL\STX\DC2\EOT\239\SOH$%\n\f\n\EOT\ENQ\SOH\STX\SOH\DC2\EOT\240\SOH\STX\US\n\r\n\ENQ\ENQ\SOH\STX\SOH\SOH\DC2\EOT\240\SOH\STX\SUB\n\r\n\ENQ\ENQ\SOH\STX\SOH\STX\DC2\EOT\240\SOH\GS\RS\n\f\n\STX\EOT\DC4\DC2\ACK\243\SOH\NUL\248\SOH\SOH\n\v\n\ETX\EOT\DC4\SOH\DC2\EOT\243\SOH\b\CAN\n\f\n\EOT\EOT\DC4\STX\NUL\DC2\EOT\244\SOH\STX\FS\n\r\n\ENQ\EOT\DC4\STX\NUL\EOT\DC2\EOT\244\SOH\STX\n\n\r\n\ENQ\EOT\DC4\STX\NUL\ENQ\DC2\EOT\244\SOH\v\DC1\n\r\n\ENQ\EOT\DC4\STX\NUL\SOH\DC2\EOT\244\SOH\DC2\ETB\n\r\n\ENQ\EOT\DC4\STX\NUL\ETX\DC2\EOT\244\SOH\SUB\ESC\n\f\n\EOT\EOT\DC4\STX\SOH\DC2\EOT\245\SOH\STX\FS\n\r\n\ENQ\EOT\DC4\STX\SOH\EOT\DC2\EOT\245\SOH\STX\n\n\r\n\ENQ\EOT\DC4\STX\SOH\ACK\DC2\EOT\245\SOH\v\DC1\n\r\n\ENQ\EOT\DC4\STX\SOH\SOH\DC2\EOT\245\SOH\DC2\ETB\n\r\n\ENQ\EOT\DC4\STX\SOH\ETX\DC2\EOT\245\SOH\SUB\ESC\n\f\n\EOT\EOT\DC4\STX\STX\DC2\EOT\246\SOH\STX;\n\r\n\ENQ\EOT\DC4\STX\STX\EOT\DC2\EOT\246\SOH\STX\n\n\r\n\ENQ\EOT\DC4\STX\STX\ENQ\DC2\EOT\246\SOH\v\DC1\n\r\n\ENQ\EOT\DC4\STX\STX\SOH\DC2\EOT\246\SOH\DC2(\n\r\n\ENQ\EOT\DC4\STX\STX\ETX\DC2\EOT\246\SOH+,\n\r\n\ENQ\EOT\DC4\STX\STX\b\DC2\EOT\246\SOH-:\n\r\n\ENQ\EOT\DC4\STX\STX\a\DC2\EOT\246\SOH89\n\f\n\EOT\EOT\DC4\STX\ETX\DC2\EOT\247\SOH\STX)\n\r\n\ENQ\EOT\DC4\STX\ETX\EOT\DC2\EOT\247\SOH\STX\n\n\r\n\ENQ\EOT\DC4\STX\ETX\ENQ\DC2\EOT\247\SOH\v\DC1\n\r\n\ENQ\EOT\DC4\STX\ETX\SOH\DC2\EOT\247\SOH\DC2\SYN\n\r\n\ENQ\EOT\DC4\STX\ETX\ETX\DC2\EOT\247\SOH\EM\SUB\n\r\n\ENQ\EOT\DC4\STX\ETX\b\DC2\EOT\247\SOH\ESC(\n\DLE\n\b\EOT\DC4\STX\ETX\b\231\a\NUL\DC2\EOT\247\SOH\FS'\n\DC1\n\t\EOT\DC4\STX\ETX\b\231\a\NUL\STX\DC2\EOT\247\SOH\FS\"\n\DC2\n\n\EOT\DC4\STX\ETX\b\231\a\NUL\STX\NUL\DC2\EOT\247\SOH\FS\"\n\DC3\n\v\EOT\DC4\STX\ETX\b\231\a\NUL\STX\NUL\SOH\DC2\EOT\247\SOH\FS\"\n\DC1\n\t\EOT\DC4\STX\ETX\b\231\a\NUL\ETX\DC2\EOT\247\SOH#'\ne\n\STX\EOT\NAK\DC2\ACK\254\SOH\NUL\135\STX\SOH\SUBW*\n Sent as part of the BlockOpResponseProto\n for READ_BLOCK and COPY_BLOCK operations.\n\n\v\n\ETX\EOT\NAK\SOH\DC2\EOT\254\SOH\b\US\n\f\n\EOT\EOT\NAK\STX\NUL\DC2\EOT\255\SOH\STX&\n\r\n\ENQ\EOT\NAK\STX\NUL\EOT\DC2\EOT\255\SOH\STX\n\n\r\n\ENQ\EOT\NAK\STX\NUL\ACK\DC2\EOT\255\SOH\v\CAN\n\r\n\ENQ\EOT\NAK\STX\NUL\SOH\DC2\EOT\255\SOH\EM!\n\r\n\ENQ\EOT\NAK\STX\NUL\ETX\DC2\EOT\255\SOH$%\n\165\SOH\n\EOT\EOT\NAK\STX\SOH\DC2\EOT\134\STX\STX\"\SUB\150\SOH*\n The offset into the block at which the first packet\n will start. This is necessary since reads will align\n backwards to a checksum chunk boundary.\n\n\r\n\ENQ\EOT\NAK\STX\SOH\EOT\DC2\EOT\134\STX\STX\n\n\r\n\ENQ\EOT\NAK\STX\SOH\ENQ\DC2\EOT\134\STX\v\DC1\n\r\n\ENQ\EOT\NAK\STX\SOH\SOH\DC2\EOT\134\STX\DC2\GS\n\r\n\ENQ\EOT\NAK\STX\SOH\ETX\DC2\EOT\134\STX !\n\f\n\STX\EOT\SYN\DC2\ACK\137\STX\NUL\156\STX\SOH\n\v\n\ETX\EOT\SYN\SOH\DC2\EOT\137\STX\b\FS\n\f\n\EOT\EOT\SYN\STX\NUL\DC2\EOT\138\STX\STX\GS\n\r\n\ENQ\EOT\SYN\STX\NUL\EOT\DC2\EOT\138\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\NUL\ACK\DC2\EOT\138\STX\v\DC1\n\r\n\ENQ\EOT\SYN\STX\NUL\SOH\DC2\EOT\138\STX\DC2\CAN\n\r\n\ENQ\EOT\SYN\STX\NUL\ETX\DC2\EOT\138\STX\ESC\FS\n\f\n\EOT\EOT\SYN\STX\SOH\DC2\EOT\140\STX\STX#\n\r\n\ENQ\EOT\SYN\STX\SOH\EOT\DC2\EOT\140\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\SOH\ENQ\DC2\EOT\140\STX\v\DC1\n\r\n\ENQ\EOT\SYN\STX\SOH\SOH\DC2\EOT\140\STX\DC2\RS\n\r\n\ENQ\EOT\SYN\STX\SOH\ETX\DC2\EOT\140\STX!\"\n\f\n\EOT\EOT\SYN\STX\STX\DC2\EOT\141\STX\STX=\n\r\n\ENQ\EOT\SYN\STX\STX\EOT\DC2\EOT\141\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\STX\ACK\DC2\EOT\141\STX\v'\n\r\n\ENQ\EOT\SYN\STX\STX\SOH\DC2\EOT\141\STX(8\n\r\n\ENQ\EOT\SYN\STX\STX\ETX\DC2\EOT\141\STX;<\n\f\n\EOT\EOT\SYN\STX\ETX\DC2\EOT\142\STX\STX:\n\r\n\ENQ\EOT\SYN\STX\ETX\EOT\DC2\EOT\142\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\ETX\ACK\DC2\EOT\142\STX\v\"\n\r\n\ENQ\EOT\SYN\STX\ETX\SOH\DC2\EOT\142\STX#5\n\r\n\ENQ\EOT\SYN\STX\ETX\ETX\DC2\EOT\142\STX89\nO\n\EOT\EOT\SYN\STX\EOT\DC2\EOT\145\STX\STX\RS\SUBA* explanatory text which may be useful to log on the client side \n\r\n\ENQ\EOT\SYN\STX\EOT\EOT\DC2\EOT\145\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\EOT\ENQ\DC2\EOT\145\STX\v\DC1\n\r\n\ENQ\EOT\SYN\STX\EOT\SOH\DC2\EOT\145\STX\DC2\EM\n\r\n\ENQ\EOT\SYN\STX\EOT\ETX\DC2\EOT\145\STX\FS\GS\n\199\STX\n\EOT\EOT\SYN\STX\ENQ\DC2\EOT\155\STX\STX0\SUB\184\STX* If the server chooses to agree to the request of a client for\n short-circuit access, it will send a response message with the relevant\n file descriptors attached.\n\n In the body of the message, this version number will be set to the\n specific version number of the block data that the client is about to\n read.\n\n\r\n\ENQ\EOT\SYN\STX\ENQ\EOT\DC2\EOT\155\STX\STX\n\n\r\n\ENQ\EOT\SYN\STX\ENQ\ENQ\DC2\EOT\155\STX\v\DC1\n\r\n\ENQ\EOT\SYN\STX\ENQ\SOH\DC2\EOT\155\STX\DC2+\n\r\n\ENQ\EOT\SYN\STX\ENQ\ETX\DC2\EOT\155\STX./\n`\n\STX\EOT\ETB\DC2\ACK\162\STX\NUL\164\STX\SOH\SUBR*\n Message sent from the client to the DN after reading the entire\n read request.\n\n\v\n\ETX\EOT\ETB\SOH\DC2\EOT\162\STX\b\GS\n\f\n\EOT\EOT\ETB\STX\NUL\DC2\EOT\163\STX\STX\GS\n\r\n\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\163\STX\STX\n\n\r\n\ENQ\EOT\ETB\STX\NUL\ACK\DC2\EOT\163\STX\v\DC1\n\r\n\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\163\STX\DC2\CAN\n\r\n\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\163\STX\ESC\FS\n\f\n\STX\EOT\CAN\DC2\ACK\166\STX\NUL\168\STX\SOH\n\v\n\ETX\EOT\CAN\SOH\DC2\EOT\166\STX\b\SUB\n\f\n\EOT\EOT\CAN\STX\NUL\DC2\EOT\167\STX\STX\GS\n\r\n\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\167\STX\STX\n\n\r\n\ENQ\EOT\CAN\STX\NUL\ACK\DC2\EOT\167\STX\v\DC1\n\r\n\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\167\STX\DC2\CAN\n\r\n\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\167\STX\ESC\FS\n\f\n\STX\EOT\EM\DC2\ACK\170\STX\NUL\175\STX\SOH\n\v\n\ETX\EOT\EM\SOH\DC2\EOT\170\STX\b$\n\f\n\EOT\EOT\EM\STX\NUL\DC2\EOT\171\STX\STX\"\n\r\n\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\171\STX\STX\n\n\r\n\ENQ\EOT\EM\STX\NUL\ENQ\DC2\EOT\171\STX\v\DC1\n\r\n\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\171\STX\DC2\GS\n\r\n\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\171\STX !\n\f\n\EOT\EOT\EM\STX\SOH\DC2\EOT\172\STX\STX\"\n\r\n\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\172\STX\STX\n\n\r\n\ENQ\EOT\EM\STX\SOH\ENQ\DC2\EOT\172\STX\v\DC1\n\r\n\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\172\STX\DC2\GS\n\r\n\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\172\STX !\n\f\n\EOT\EOT\EM\STX\STX\DC2\EOT\173\STX\STX\EM\n\r\n\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\173\STX\STX\n\n\r\n\ENQ\EOT\EM\STX\STX\ENQ\DC2\EOT\173\STX\v\DLE\n\r\n\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\173\STX\DC1\DC4\n\r\n\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\173\STX\ETB\CAN\n\f\n\EOT\EOT\EM\STX\ETX\DC2\EOT\174\STX\STX)\n\r\n\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\174\STX\STX\n\n\r\n\ENQ\EOT\EM\STX\ETX\ACK\DC2\EOT\174\STX\v\FS\n\r\n\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\174\STX\GS$\n\r\n\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\174\STX'(")